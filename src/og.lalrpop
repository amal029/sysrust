use crate::tokens::{LexicalError, Token};
use crate::ast;

grammar;

pub Script: Vec<ast::Stmt> = {
    <stmts:Statement*> => return stmts,
}

pub Block: ast::Stmt = {
   <l:@L> "{" <ss:Script> "}" <r:@R> => ast::Stmt::Block(ss, (l, r)),
}

pub Present: ast::Stmt = {
    <l:@L> "if" "(" <e:Expr> ")" <b:Block> <r:@R> =>
    ast::Stmt::Present(e, Box::new(b), None, (l, r)),
    <l:@L> "if" "(" <e:Expr> ")" <b:Block> "else" <eb:Block> <r:@R> =>
    ast::Stmt::Present(e, Box::new(b), Some(Box::new(eb)), (l, r)),
}

pub Abort: ast::Stmt = {
    <l:@L> "abort" "(" <e:Expr> ")" <s:Block> <r:@R> =>
    ast::Stmt::Abort(e, None, Box::new(s), (l, r)),
    <l:@L> "weak" "abort" "(" <e:Expr> ")" <s:Block> <r:@R> =>
    ast::Stmt::Abort(e, Some(ast::ASQual::Weak), Box::new(s), (l, r)),
    <l:@L> "abort" "(" "immediate" <e:Expr> ")" <s:Block> <r:@R> =>
    ast::Stmt::Abort(e, Some(ast::ASQual::Immediate), Box::new(s), (l, r)),
    // <l:@L> "weak" "abort" "(" "immediate" <e:Expr> ")" <s:Block> <r:@R> =>
    // ast::Stmt::Abort(e, Some(ast::ASQual::WeakImmediate), Box::new(s), (l, r)),
}

pub Suspend: ast::Stmt = {
    <l:@L> "suspend" "(" <e:Expr> ")" <s:Block> <r:@R> =>
    ast::Stmt::Suspend(e, None, Box::new(s), (l, r)),
    // <l:@L> "weak" "suspend" "(" <e:Expr> ")" <s:Block> <r:@R> =>
    // ast::Stmt::Suspend(e, Some(ast::ASQual::Weak), Box::new(s), (l, r)),
    // <l:@L> "suspend" "(" "immediate" <e:Expr> ")" <s:Block> <r:@R> =>
    // ast::Stmt::Suspend(e, Some(ast::ASQual::Immediate), Box::new(s), (l, r)),
    // <l:@L> "weak" "suspend" "(" "immediate" <e:Expr> ")" <s:Block> <r:@R> =>
    // ast::Stmt::Suspend(e, Some(ast::ASQual::WeakImmediate), Box::new(s), (l, r)),
}

pub Await : ast::Stmt = {
    <l:@L> <la: Symbol> ":" "await" "(" <s:Expr> ")" <r:@R> =>
    ast::Stmt::Abort(s, None, Box::new(ast::Stmt::Loop (Box::new(ast::Stmt::Pause (la, (l, r))), (l, r))), (l, r)),
   <l:@L> <la: Symbol> ":" "await" "(" "immediate" <s:Expr> ")" <r:@R> =>
    ast::Stmt::Abort(s, Some(ast::ASQual::Immediate), Box::new(ast::Stmt::Loop (Box::new(ast::Stmt::Pause (la, (l, r))), (l, r))), (l, r)),

}

pub Halt: ast::Stmt ={
    <l:@L> <la:Symbol> ":" "halt" <r:@R> =>
    ast::Stmt::Loop(Box::new(ast::Stmt::Pause(la, (l, r))), (l, r))
}

pub Sustain : ast::Stmt = {
    <l:@L> <la: Symbol> ":" "sustain" <s:Symbol> "(" <e:SimpleDataExpr> ")" <r:@R> =>
    ast::Stmt::Loop(Box::new(ast::Stmt::Block(vec![ast::Stmt::Emit(s,Some(e), (l, r)),
    ast::Stmt::Pause(la, (l, r))], (l, r))), (l, r)),
    <l:@L> <la: Symbol> ":" "sustain" <s:Symbol> <r:@R> =>
    ast::Stmt::Loop(Box::new(ast::Stmt::Block(vec![ast::Stmt::Emit(s,None, (l, r)),
    ast::Stmt::Pause(la, (l, r))], (l, r))), (l, r)),

}

pub Spar: Vec<ast::Stmt> = {
    <ss:Spar> "||" <bb:Block> =>
    	   {let mut mm = ss; mm.push(bb); mm},
    <lb:Block> "||" <rb:Block> => vec![lb, rb],
}

pub IOSignal: ast::Stmt = {
   <l:@L> <i:IOT> "signal" <s:Symbol> <r:@R> => ast::Stmt::Signal(s, Some(i), (l, r)),
   <l:@L> "signal" <s:Symbol> <r:@R> => ast::Stmt::Signal(s, None, (l, r)),

   <l:@L> <i:"output"> "integer" "signal" <s:Symbol> "=" <iv:"i64"> ":" "+" <r:@R> =>
   	  ast::Stmt::DataSignal(s, Some(ast::IO::Output), ast::Type::Int,
	  ast::Val::VInt(iv), ast::ExprOp::Plus, (l, r)),
   <l:@L> <i:"output"> "integer" "signal" <s:Symbol> "=" <iv:"i64"> ":" "*" <r:@R> =>
   	  ast::Stmt::DataSignal(s, Some(ast::IO::Output), ast::Type::Int,
	  ast::Val::VInt(iv), ast::ExprOp::Mul, (l, r)),
   <l:@L> <i:"output"> "float" "signal" <s:Symbol> "=" <iv:"f64"> ":" "+" <r:@R> =>
   	  ast::Stmt::DataSignal(s, Some(ast::IO::Output), ast::Type::Float,
	  ast::Val::VFloat(iv), ast::ExprOp::Plus, (l, r)),
   <l:@L> <i:"output"> "float" "signal" <s:Symbol> "=" <iv:"f64"> ":" "*" <r:@R> =>
   	  ast::Stmt::DataSignal(s, Some(ast::IO::Output), ast::Type::Float,
	  ast::Val::VFloat(iv), ast::ExprOp::Mul, (l, r)),

   <l:@L> <i:"input"> "integer" "signal" <s:Symbol> <r:@R> =>
   	  ast::Stmt::DataSignal(s, Some(ast::IO::Input), ast::Type::Int,
	  ast::Val::VInt(0_i64), ast::ExprOp::Plus, (l, r)),
   <l:@L> <i:"input"> "float" "signal" <s:Symbol> <r:@R> =>
   	  ast::Stmt::DataSignal(s, Some(ast::IO::Input), ast::Type::Float,
	  ast::Val::VFloat(0_f64), ast::ExprOp::Plus, (l, r)),

   <l:@L> "integer" "signal" <s:Symbol> "=" <iv:"i64"> ":" "+" <r:@R> =>
   	  ast::Stmt::DataSignal(s, None, ast::Type::Int,
	  ast::Val::VInt(iv), ast::ExprOp::Plus, (l, r)),
   <l:@L> "integer" "signal" <s:Symbol> "=" <iv:"i64"> ":" "*" <r:@R> =>
   	  ast::Stmt::DataSignal(s, None, ast::Type::Int,
	  ast::Val::VInt(iv), ast::ExprOp::Mul, (l, r)),
   <l:@L> "float" "signal" <s:Symbol> "=" <iv:"f64"> ":" "+" <r:@R> =>
   	  ast::Stmt::DataSignal(s, None, ast::Type::Float,
	  ast::Val::VFloat(iv), ast::ExprOp::Plus, (l, r)),
   <l:@L> "float" "signal" <s:Symbol> "=" <iv:"f64"> ":" "*" <r:@R> =>
   	  ast::Stmt::DataSignal(s, None, ast::Type::Float,
	  ast::Val::VFloat(iv), ast::ExprOp::Mul, (l, r)),
}

pub Statement: ast::Stmt = {
   <l:@L> "nothing" ";" <r:@R> =>
   	  return ast::Stmt::Noop((l, r)),
   <l:@L> <s:Symbol> "=" <e:SimpleDataExpr> ";" <r:@R> =>
   	 ast::Stmt::Assign(s, e, (l,r)),
   <l:@L> <la:Symbol> ":" <s:"pause"> ";" <r:@R> => ast::Stmt::Pause(la, (l,r)),
   <l:@L> "emit" <s:Symbol> "(" <e:SimpleDataExpr> ")" ";" <r:@R> =>
   	 ast::Stmt::Emit(s, Some(e), (l,r)),
   <l:@L> "emit" <s:Symbol> ";" <r:@R> =>
   	 ast::Stmt::Emit(s, None, (l,r)),
   <l:@L> "loop" <b:Block> ";" <r:@R> =>
   	   ast::Stmt::Loop(Box::new(b), (l, r)),
   <p:Present> ";" => p,
   <a:Abort> ";" => a,
   <a:Suspend> ";" => a,
   <a:Await> ";" => a,
   <b:Block> => b,
   <a:Sustain> ";" => a,
   <a:Halt> ";" => a,
   <a:IOSignal> ";" => a,
   <l:@L> "integer" <s:Symbol> <r:@R> "=" <iv:"i64"> ";" =>
   ast::Stmt::Variable(s, ast::Type::Int, ast::Val::VInt(iv), (l, r)),
   <l:@L> "float" <s:Symbol> <r:@R> "=" <iv:"f64"> ";" =>
   ast::Stmt::Variable(s, ast::Type::Float, ast::Val::VFloat(iv), (l, r)),
   <l:@L> <ss:Spar> ";" <r:@R> => ast::Stmt::Spar(ss, (l, r)),
}

pub IOT : ast::IO =  {
    <l:@L> "input" <r:@R> => ast::IO::Input,
    <l:@L> "output" <r:@R> => ast::IO::Output,
}

pub Symbol: ast::Symbol = {
   <l:@L> <id: "id"> <r:@R> => ast::Symbol::Symbol(id, (l, r)),
}

pub Expr: ast::Expr = {
    #[precedence(level="0")] // Highest precedence
    <l:@L> <i:"true"> <r:@R> => ast::Expr::True((l,r)),
    <l:@L> <i:"false"> <r:@R> => ast::Expr::False((l,r)),
    <l:@L> <s:Symbol> <r:@R> =>
    	   ast::Expr::Esymbol(s, (l, r)),
    <l:@L> "!" <le:Expr> <r:@R> =>
    	   ast::Expr::Not(Box::new(le), (l, r)),
    <l:@L> <le:RelDataExpr> <r:@R> =>
    	   ast::Expr::DataExpr(le, (l, r)),
    <l:@L> "(" <le:Expr> ")" <r:@R> =>
    	   ast::Expr::Brackets(Box::new(le), (l, r)),
   #[precedence(level="1")] #[assoc(side="left")]
    <l:@L> <le:Expr> "and" <re:Expr> <r:@R> =>
    	    ast::Expr::And(Box::new(le), Box::new(re), (l, r)),
    <l:@L> <le:Expr> "or" <re:Expr> <r:@R> =>
    	   ast::Expr::Or(Box::new(le), Box::new(re), (l, r)),
}

pub RelDataExpr: ast::RelDataExpr = {
    <l:@L> <le: SimpleDataExpr> "<" <re:SimpleDataExpr> <r:@R> =>
    ast::RelDataExpr::LessThan(le, re, (l, r)),
    <l:@L> <le: SimpleDataExpr> ">" <re:SimpleDataExpr> <r:@R> =>
    ast::RelDataExpr::GreaterThan(le, re, (l, r)),
    <l:@L> <le: SimpleDataExpr> "<=" <re:SimpleDataExpr> <r:@R> =>
    ast::RelDataExpr::LessThanEqual(le, re, (l, r)),
    <l:@L> <le: SimpleDataExpr> ">=" <re:SimpleDataExpr> <r:@R> =>
    ast::RelDataExpr::GreaterThanEqual(le, re, (l, r)),
    <l:@L> <le: SimpleDataExpr> "==" <re:SimpleDataExpr> <r:@R> =>
    ast::RelDataExpr::EqualTo(le, re, (l, r)),
}

pub SimpleDataExpr: ast::SimpleDataExpr = {
    #[precedence(level="0")] // Highest precedence
    <l:@L> <i:"i64"> <r:@R> => ast::SimpleDataExpr::ConstI(i, (l,r)),
    <l:@L> <i:"f64"> <r:@R> => ast::SimpleDataExpr::ConstF(i, (l,r)),
    <l:@L> <i:Symbol> <r:@R> => ast::SimpleDataExpr::VarRef(i, (l,r)),
    <l:@L> "?" <i:Symbol> <r:@R> => ast::SimpleDataExpr::SignalRef(i, (l,r)),
    <l:@L> <i:Symbol> "(" <ll:SimpleDataExprList> ")" <r:@R> =>
           ast::SimpleDataExpr::Call(i, ll, (l, r)),
    <l:@L> <i:Symbol> "(" ")" <r:@R> =>
           ast::SimpleDataExpr::Call(i, vec![], (l, r)),
   #[precedence(level="1")] #[assoc(side="left")] // Highest precedence
    <l:@L> <e1:SimpleDataExpr> "^^" <e2:SimpleDataExpr> <r:@R> =>
    	   ast::SimpleDataExpr::SimpleBinaryOp(Box::new(e1), ast::ExprOp::Pow,
	   Box::new(e2), (l, r)),
   #[precedence(level="2")] #[assoc(side="left")] // Highest precedence
   <l:@L> <e1:SimpleDataExpr> "*" <e2:SimpleDataExpr> <r:@R> =>
    	   ast::SimpleDataExpr::SimpleBinaryOp(Box::new(e1), ast::ExprOp::Mul,
	   Box::new(e2), (l, r)),
    <l:@L> <e1:SimpleDataExpr> "/" <e2:SimpleDataExpr> <r:@R> =>
    	   ast::SimpleDataExpr::SimpleBinaryOp(Box::new(e1), ast::ExprOp::Div,
	   Box::new(e2), (l, r)),
    <l:@L> <e1:SimpleDataExpr> "%" <e2:SimpleDataExpr> <r:@R> =>
    	   ast::SimpleDataExpr::SimpleBinaryOp(Box::new(e1), ast::ExprOp::Mod,
	   Box::new(e2), (l, r)),
   #[precedence(level="3")] #[assoc(side="left")] // Highest precedence
    <l:@L> <e1:SimpleDataExpr> "+" <e2:SimpleDataExpr> <r:@R> =>
    	   ast::SimpleDataExpr::SimpleBinaryOp(Box::new(e1), ast::ExprOp::Plus,
	   Box::new(e2), (l, r)),
    <l:@L> <e1:SimpleDataExpr> "-" <e2:SimpleDataExpr> <r:@R> =>
    	   ast::SimpleDataExpr::SimpleBinaryOp(Box::new(e1), ast::ExprOp::Minus,
	   Box::new(e2), (l, r)),
}

// Simple data expr
pub SimpleDataExprList : Vec<ast::SimpleDataExpr> = {
 <e1: SimpleDataExprList> "," <e2:SimpleDataExpr> =>
 {let mut mm = e1; mm.push(e2); mm},
 <e: SimpleDataExpr> => vec![e],
}

extern {
       type Location = usize;
       type Error = LexicalError;

enum Token {
    "signal" => Token::Signal,
    "pause" => Token::Pause,
    "emit" => Token::Emit,
    "loop" => Token::Loop,
    "abort" => Token::Abort,
    "suspend" => Token::Suspend,
    "weak" => Token::Weak,
    "immediate" => Token::Immediate,
    "if" => Token::If,
    "else" => Token::Else,
    "input" => Token::Input,
    "output" => Token::Output,
    "id" => Token::Symbol(<String>),
    "i64" => Token::Integer(<i64>),
    "f64" => Token::Float(<f64>),
    "(" => Token::LParen,
    ")" => Token::RParen,
    "{" => Token::LBrace,
    "}" => Token::RBrace,
    "+" => Token::OpAdd,
    "-" => Token::OpSub,
    "*" => Token::OpMul,
    "/" => Token::OpDiv,
    "%" => Token::OpMod,
    "^^" => Token::OpPow,
    "=" => Token::OpEqual,
    "==" => Token::OpEqualEqual,
    "<=" => Token::OpLEEqual,
    ">=" => Token::OpGEEqual,
    "<" => Token::OpLT,
    ">" => Token::OpGT,
    "!" => Token::OpNot,
    "and" => Token::OpAnd,
    "or" => Token::OpOr,
    "||" => Token::OpPar,
    ";" => Token::Semicolon,
    "?" => Token::OpQ,
    "," => Token::OpComma,
    "nothing" => Token::OpNothing,
    "await" => Token::Await,
    "sustain" => Token::Sustain,
    "true" => Token::True,
    "halt" => Token::Halt,
    "false" => Token::False,
    ":" => Token::OpColon,
    "integer" => Token::TInt,
    "float" => Token::TFloat,
    "extern" => Token::TExtern,
    }
}
